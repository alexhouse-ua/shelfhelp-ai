name: Weekly Reports & Reflection Automation

on:
  schedule:
    # Run every Sunday at 9:00 AM UTC (weekly reports)
    - cron: '0 9 * * 0'
    # Run daily at 8:00 PM UTC (reflection prompts)
    - cron: '0 20 * * *'
  workflow_dispatch: # Allow manual triggering
    inputs:
      report_type:
        description: 'Type of report to generate'
        required: false
        default: 'auto'
        type: choice
        options:
        - auto
        - weekly
        - monthly
        - reflection-check

jobs:
  generate-reports:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Determine report type
      id: report_type
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          REPORT_TYPE="${{ github.event.inputs.report_type }}"
        else
          # Determine based on schedule
          DAY_OF_WEEK=$(date +%u) # 1=Monday, 7=Sunday
          if [ "$DAY_OF_WEEK" = "7" ]; then
            REPORT_TYPE="weekly"
          else
            REPORT_TYPE="reflection-check"
          fi
        fi
        echo "report_type=$REPORT_TYPE" >> $GITHUB_OUTPUT
        echo "Selected report type: $REPORT_TYPE"
    
    - name: Generate weekly report
      if: steps.report_type.outputs.report_type == 'weekly' || steps.report_type.outputs.report_type == 'auto'
      env:
        FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
        FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
        FIREBASE_DATABASE_URL: ${{ secrets.FIREBASE_DATABASE_URL }}
        FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      run: |
        echo "Generating weekly reading report..."
        if node -e "
          const fs = require('fs');
          const path = require('path');
          
          // Simple weekly report generation
          async function generateWeeklyReport() {
            try {
              const response = await fetch('http://localhost:3000/api/reports/weekly');
              if (!response.ok) {
                throw new Error('Failed to generate weekly report');
              }
              
              const reportData = await response.json();
              const timestamp = new Date().toISOString().split('T')[0];
              const reportPath = path.join('reports', \`weekly-report-\${timestamp}.md\`);
              
              // Ensure reports directory exists
              if (!fs.existsSync('reports')) {
                fs.mkdirSync('reports', { recursive: true });
              }
              
              fs.writeFileSync(reportPath, reportData.content);
              console.log(\`Weekly report generated: \${reportPath}\`);
            } catch (error) {
              console.error('Report generation failed:', error.message);
              process.exit(1);
            }
          }
          
          generateWeeklyReport();
        "; then
          echo "Weekly report generated successfully"
        else
          echo "Weekly report generation failed"
        fi
    
    - name: Check for pending reflections
      if: steps.report_type.outputs.report_type == 'reflection-check' || steps.report_type.outputs.report_type == 'auto'
      run: |
        echo "Checking for books needing reflection..."
        
        # Check for recently finished books without reflections
        node -e "
          const fs = require('fs');
          const path = require('path');
          
          async function checkReflections() {
            try {
              const booksData = fs.readFileSync('data/books.json', 'utf-8');
              const books = JSON.parse(booksData);
              
              const now = new Date();
              const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
              
              const needReflection = books.filter(book => {
                if (book.status !== 'finished') return false;
                if (!book.date_finished) return false;
                
                const finishedDate = new Date(book.date_finished);
                if (finishedDate < weekAgo) return false; // Only recent books
                
                // Check if reflection exists
                const reflectionPath = path.join('reflections', book.goodreads_id || book.guid, 'reflection.md');
                return !fs.existsSync(reflectionPath);
              });
              
              if (needReflection.length > 0) {
                console.log(\`Found \${needReflection.length} books needing reflection:\`);
                needReflection.forEach(book => {
                  console.log(\`- \${book.title} by \${book.author_name} (finished: \${book.date_finished})\`);
                });
                
                // Create reflection prompt file
                const promptContent = needReflection.map(book => 
                  \`## \${book.title} by \${book.author_name}
                  
**Finished**: \${book.date_finished}
**Rating**: \${book.user_rating || 'Not rated'}/5 stars

### Reflection Questions:
1. What did you love most about this book?
2. How did it compare to your expectations?
3. Would you recommend it to others? Why?
4. What themes or messages resonated with you?
5. How did this book make you feel?

---
\`).join('\\n\\n');
                
                const promptPath = 'reports/pending-reflections.md';
                fs.writeFileSync(promptPath, \`# Pending Book Reflections
                
Generated on: \${new Date().toISOString().split('T')[0]}

\${promptContent}
\`);
                
                console.log(\`Created reflection prompt file: \${promptPath}\`);
              } else {
                console.log('No books currently need reflection prompts');
              }
            } catch (error) {
              console.error('Reflection check failed:', error.message);
            }
          }
          
          checkReflections();
        "
    
    - name: Generate monthly report
      if: steps.report_type.outputs.report_type == 'monthly'
      run: |
        echo "Generating monthly reading report..."
        # Monthly report logic would go here
        echo "Monthly report functionality not yet implemented"
    
    - name: Check for changes
      id: changes
      run: |
        if git diff --quiet HEAD -- reports/; then
          echo "No report changes detected"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "Report changes detected"
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit and push reports
      if: steps.changes.outputs.has_changes == 'true'
      run: |
        git add reports/
        git commit -m "📊 Automated reports: ${{ steps.report_type.outputs.report_type }}
        
        Generated automated reading reports and reflection prompts
        Run at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        Type: ${{ steps.report_type.outputs.report_type }}
        
        🤖 Generated with GitHub Actions"
        
        # Push with retry logic
        for i in {1..3}; do
          if git push; then
            echo "Successfully pushed reports"
            break
          else
            echo "Push failed, retrying in 5 seconds... (attempt $i/3)"
            sleep 5
          fi
        done
    
    - name: Create summary
      if: always()
      run: |
        echo "## Report Generation Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Run Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "- **Report Type**: ${{ steps.report_type.outputs.report_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Changes**: ${{ steps.changes.outputs.has_changes }}" >> $GITHUB_STEP_SUMMARY
        
        if [ -d reports ]; then
          REPORT_COUNT=$(find reports -name "*.md" | wc -l)
          echo "- **Total Reports**: $REPORT_COUNT" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "See the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details." >> $GITHUB_STEP_SUMMARY
    
    - name: Handle errors
      if: failure()
      run: |
        echo "Report generation workflow failed"
        echo "::error::Report generation failed at $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "Check the logs above for detailed error information"
        
        # Create error summary
        echo "## ❌ Report Generation Failed" >> $GITHUB_STEP_SUMMARY
        echo "The automated report generation failed. Please check the logs for details." >> $GITHUB_STEP_SUMMARY
        echo "- **Failed at**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "- **Report Type**: ${{ steps.report_type.outputs.report_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow**: [View logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY