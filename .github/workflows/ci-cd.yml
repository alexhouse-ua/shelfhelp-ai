name: CI/CD Pipeline - ShelfHelp AI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20.x'
  COVERAGE_THRESHOLD: 80

jobs:
  test:
    name: Test & Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run tests with coverage
      run: npm run test:ci
      env:
        NODE_ENV: test
        ENABLE_FIREBASE: false
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        
    - name: Archive test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          coverage/
          test-results.xml
          
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const coverage = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
          const total = coverage.total;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## Test Coverage Report
            
            | Metric | Coverage |
            |--------|----------|
            | Lines | ${total.lines.pct}% |
            | Functions | ${total.functions.pct}% |
            | Branches | ${total.branches.pct}% |
            | Statements | ${total.statements.pct}% |
            
            ${total.lines.pct >= 80 ? '‚úÖ' : '‚ùå'} Coverage threshold: ${total.lines.pct >= 80 ? 'PASSED' : 'FAILED'}`
          });

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Run dependency check
      uses: actions/dependency-review-action@v4
      if: github.event_name == 'pull_request'

  deploy-staging:
    name: Deploy to Staging
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --only=production
      
    - name: Deploy to Railway (Staging)
      run: |
        echo "üöÄ Deploying to staging environment"
        # Railway deployment would go here
        
    - name: Run smoke tests
      run: |
        echo "üß™ Running smoke tests against staging"
        # Smoke tests would go here

  deploy-production:
    name: Deploy to Production
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --only=production
      
    - name: Deploy to Railway (Production)
      run: |
        echo "üöÄ Deploying to production environment"
        # Railway deployment would go here
        
    - name: Run health checks
      run: |
        echo "üè• Running production health checks"
        # Health checks would go here
        
    - name: Notify deployment
      if: success()
      run: |
        echo "‚úÖ Production deployment successful"