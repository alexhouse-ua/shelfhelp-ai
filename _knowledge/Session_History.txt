
Shelf Help
Private
Create an AI assistant that will help me track my read books, manage my TBR, create reports, and provide recommendations based on my preferences.

 

Project Restart: VS Code Terminal Setup
Last message 11 hours ago
Shelf Help AI Project Kickoff
Last message 13 hours ago
Project knowledge
7% of project capacity used
Retrieving

alexhouse-ua/shelfhelp-ai
main

GITHUB



Session 2 Handover Doc
152 lines

text



Session 1 Handover Doc
136 lines

text



Session 1 Handover Doc
5.29 KB â€¢136 lines
â€¢
Formatting may be inconsistent from source

# **Shelf Help AI Project Handover Document**

## **Project Status: Core Infrastructure Complete**

This project is an AI-powered reading assistant with real-time queue management. We've completed Phase 1 (infrastructure) and are ready for Phase 2 (reflection system).

---

## **Critical Project Knowledge**

### **Architecture Decisions Made**
- **Tech Stack**: Node.js + Vercel + Firebase (not Python) for reliability
- **Data Store**: Git-tracked JSON files as source of truth, Firebase as mirror
- **Testing**: REST Client in VS Code with `api-tests.http` file
- **Development**: Claude Code integration for efficient coding

### **Key Constraints (Non-Negotiable)**
1. **Zero cost beyond subscriptions** - no paid APIs
2. **File-based canonical store** - `books.json` is source of truth
3. **All CRUD through API** - never write directly to JSON files
4. **Field schema is sacred** - exact field names in `Claude.md` cannot change
5. **RAG before recommendations** - always query vector index first

### **Data Structure Gotchas**
- **Classifications.yaml**: Nested structure with `Tropes[].Tropes` arrays grouped by Genre
- **Books.json**: Has 100+ real books from RSS ingestion already
- **Spice levels**: Must be integers 1-5, not custom labels
- **Trope validation**: Case-insensitive, searches nested Genre arrays

---

## **Current Technical State**

### **Working Components**
âœ… **RSS Pipeline**: Goodreads RSS â†’ books.json every 6 hours via GitHub Actions  
âœ… **API Server**: Express.js with all endpoints (GET/POST/PATCH books, queue, reports)  
âœ… **RAG System**: Vector indexing with local embeddings, rebuilds on git push  
âœ… **Testing**: REST Client setup with comprehensive test suite  
âœ… **GitHub Actions**: Automated RSS sync and RAG rebuild workflows  

### **Temporarily Disabled**
ðŸ”§ **Firebase Sync**: Disabled due to credential conflicts - needs GitHub Secrets setup  
ðŸ”§ **Trope Validation**: Partially broken due to nested classifications structure  

### **Development Workflow**
1. Local development: `npm run dev` in VS Code
2. Test endpoints via `api-tests.http` with REST Client extension
3. Use Claude Code for complex coding tasks: `claude ask "..."`
4. Commit triggers automatic RAG rebuild via GitHub Actions

---

## **Critical Files & Their Roles**

### **Source of Truth Files** (Never edit directly)
- `data/books.json` - 100+ books from RSS, use API only
- `data/classifications.yaml` - Genre/subgenre/trope taxonomy
- `data/preferences.json` - User preference vectors (future)

### **Core Scripts**
- `scripts/api-server.js` - Main Express API server
- `scripts/rss-ingest.js` - RSS parsing and book ingestion
- `scripts/rag-ingest.js` - Vector store building
- `scripts/firebase-config.js` - Firebase connection (needs auth fix)

### **Documentation**
- `Claude.md` - Development guidelines and constraints
- `_knowledge/Project_Plan.md` - Strategic roadmap
- `_knowledge/Operating_Instructions.md` - Detailed workflows

---

## **Known Issues & Solutions**

### **Firebase Authentication Problem**
- **Issue**: Socket hang ups due to missing service account credentials
- **Solution**: Set up GitHub Secrets for `FIREBASE_SERVICE_ACCOUNT` key
- **Temporary Fix**: Firebase operations disabled in api-server.js

### **Trope Validation Bug**
- **Issue**: Validation fails because tropes are nested under Genre sections
- **Root Cause**: Code expects flat array, but classifications.yaml has `Tropes[].Tropes`
- **Fix Needed**: Update validation to search through all Genre.Tropes arrays

### **API Test Mismatches**
- **Issue**: Some tests use fake data that doesn't exist in books.json
- **Solution**: Update api-tests.http to use real book titles like "Power Play"

---

## **Next Session Priorities**

### **Phase 2: Reflection System** (Ready to Start)
1. **Fix Firebase auth** - Set up GitHub Secrets properly
2. **Implement reflection workflow** - Markdown templates in `/reflections/`
3. **Build weekly reports** - Generate stats and summaries
4. **Create recommendation engine** - RAG-powered book suggestions

### **Specific Tasks**
- Create reflection prompt templates when books marked "Finished"
- Build queue management logic with priority calculations
- Implement weekly/monthly report generation
- Add RAG-powered "what should I read next" functionality

---

## **Developer Notes**

### **Token Conservation Strategy**
- Use Claude Code for complex coding tasks
- Use regular terminal for basic operations (npm install, git commits)
- Reference existing files instead of recreating from scratch
- Make incremental changes, not rewrites

### **Testing Approach**
- Start API server: `npm run dev`
- Use REST Client in VS Code with `api-tests.http`
- Test with real book data from your books.json
- Firebase sync is optional for testing

### **Commit Strategy**
- Only commit at logical milestones (not every small change)
- Each commit triggers RAG rebuild automatically
- Never commit service account JSON files
- Follow semantic commit messages

---

## **Emergency Contacts & Resources**

- **Firebase Console**: https://console.firebase.google.com/project/shelfhelp-ai
- **GitHub Repo**: https://github.com/[username]/shelfhelp-ai
- **RSS Feed**: Already configured in GitHub Secrets
- **Documentation**: All in `_knowledge/` directory

**The foundation is solid. The next engineer can focus on building features rather than infrastructure.**


Shelf Help
Private
Create an AI assistant that will help me track my read books, manage my TBR, create reports, and provide recommendations based on my preferences.

 

Project Restart: VS Code Terminal Setup
Last message 11 hours ago
Shelf Help AI Project Kickoff
Last message 13 hours ago
Project knowledge
7% of project capacity used
Retrieving

alexhouse-ua/shelfhelp-ai
main

GITHUB



Session 2 Handover Doc
152 lines

text



Session 1 Handover Doc
136 lines

text



Session 2 Handover Doc
5.73 KB â€¢152 lines
â€¢
Formatting may be inconsistent from source

Session 2 Handover Document
Session Progress: Reflection System Implemented
Successfully completed Firebase authentication setup and implemented the core reflection workflow system. Ready for weekly report integration and queue management.

Key Accomplishments This Session
Firebase Authentication Fixed
âœ… GitHub Secrets Added: All 6 Firebase secrets properly configured as Repository secrets
âœ… Local Environment: Service account file working locally
ðŸ”§ Sync Issue: PATCH operations cause socket hangups - Firebase disabled for now
Decision: Continue with local-only mode; Firebase sync is optional
Reflection System Implemented
âœ… Template System: Rich markdown templates in /reflections/ directory
âœ… Auto-Creation: Books marked "Finished" automatically generate reflection files
âœ… Book Integration: reflection_pending flag added to book records
âœ… File Structure: /reflections/{book_id}/{timestamp}.md with personalized content
Testing Infrastructure Validated
âœ… API Server: Working with local persistence
âœ… REST Client: Full test suite functional
âœ… Data Flow: RSS â†’ books.json â†’ API â†’ reflections workflow complete

Critical Technical Discoveries
Book ID Schema Reality

RSS Books: Use guid (full URLs) as primary key, goodreads_id is null
API Endpoints: Expect goodreads_id in URL paths (e.g., /api/books/123456)
Test Data: Only books with real goodreads_id work with PATCH operations
Workaround: Use test books (123456, 345678) for API development

Firebase Sync Behavior

GET Operations: Work perfectly with Firebase enabled
PATCH Operations: Cause socket hangups during write operations
Local Mode: All operations work flawlessly without Firebase
Recommendation: Keep Firebase disabled (ENABLE_FIREBASE=false) until sync issues resolved

Reflection Workflow Success

Trigger: Changing book status to "Finished" auto-creates reflection file
Template: Comprehensive questions covering plot, characters, tropes, personal impact
Personalization: Uses actual book metadata (title, author, genre, tropes)
File Location: /reflections/{book_id}/{timestamp}.md


Immediate Next Steps
Priority 1: Weekly Report Integration

Status: Weekly report endpoint exists but needs reflection file integration
Task: Modify generate_report to analyze reflection files for insights
Test: POST /api/generate_report with {"type": "weekly"}

Priority 2: Queue Management Logic

Current: Basic queue_position field exists
Needed: Priority calculation based on due dates, series continuity, preferences
Reference: scripts/queue-manager.js has priority algorithm framework

Priority 3: RAG-Powered Recommendations

Infrastructure: Vector store rebuilds on every commit
Missing: "What should I read next?" endpoint using RAG retrieval
Integration: Combine user preferences with reflection sentiment analysis


Development Environment Notes
Terminal Setup (VS Code)

Bash Terminal: Ctrl+Shift+ for npm/curl commands
Claude Code Terminal: Ctrl+Shift+P â†’ "Claude Code: Open Terminal"
REST Client: Use api-tests.http for endpoint testing

Server Startup (Local Mode)
bash# Do NOT set ENABLE_FIREBASE=true (causes socket hangups)
npm run dev
Testing Real vs Mock Data

Real Books: Use RSS-ingested books (guid-based) for read operations
Mock Books: Use 123456, 345678 for write operations (have goodreads_id)
Reflection Testing: Book 123456 has complete reflection file created


Critical Code Decisions Made
Reflection Template Structure

Comprehensive: 8 sections from Overall Experience to Future Reading
Personalized: Uses actual book metadata in template
Extensible: Easy to add genre-specific questions
Location: Template saved as /reflections/template.md

API Integration Points

PATCH /api/books/:id: Auto-triggers reflection creation when status="Finished"
Book Schema: Added reflection_pending boolean flag
File Management: Automatic directory creation for new books

Data Flow Validation

RSS â†’ books.json: Working (100+ books imported)
API â†’ reflections: Working (template generation successful)
RAG Index: Rebuilds automatically on git commits


Knowledge File Updates Needed (this will be the first task we do through Claude Code in the next session)
Claude.md Updates

Add: Firebase sync disabled due to socket hangups
Add: Book ID schema reality (guid vs goodreads_id)
Add: Reflection workflow implementation details
Update: Current session status to "Session 2 Complete"

Project Plan Updates

Mark Complete: Phase 2 Reflection System âœ…
Update Priority: Weekly report integration (next)
Note: Firebase sync optional, not blocking

Operating Instructions Updates

Add: Reflection file structure and template system
Add: Book status change triggers and workflow
Update: Development environment setup (Firebase disabled)


Known Issues & Workarounds
Firebase Socket Hangups

Symptom: PATCH operations timeout with socket hangup
Cause: Firebase Admin SDK authentication issue during writes
Workaround: Run in local-only mode (ENABLE_FIREBASE=false)
Impact: Core functionality unaffected, just no realtime mirror

Book ID Mismatch

Issue: API expects goodreads_id but RSS books use guid
Testing: Use mock books (123456, 345678) for write operations
Production: Need to extract actual Goodreads IDs from RSS URLs

Server Restarts

Observation: Server occasionally stops during development
Cause: Likely nodemon restarting on file changes
Solution: Just run npm run dev again


Success Metrics Achieved

âœ… Reflection System: Auto-generates personalized templates
âœ… API Integration: Status changes trigger reflection workflow
âœ… File Management: Organized reflection directory structure
âœ… Local Development: Stable without Firebase dependency
âœ… Testing Pipeline: REST Client tests working with real data

The reflection system is fully functional. Next engineer can focus on weekly reports and queue management without infrastructure concerns.