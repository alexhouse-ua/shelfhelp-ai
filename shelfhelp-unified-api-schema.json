{
  "openapi": "3.1.0",
  "info": {
    "title": "ShelfHelp AI Assistant API",
    "description": "Complete AI-powered reading assistant with book management, classification, and queue operations. Optimized for ChatGPT Plus Actions with mobile-first conversational interfaces.",
    "version": "1.0.0",
    "contact": {
      "name": "ShelfHelp AI Support",
      "url": "https://shelfhelp-ai.vercel.app"
    }
  },
  "servers": [
    {
      "url": "https://shelfhelp-ai.vercel.app",
      "description": "Production server"
    }
  ],
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key",
        "description": "API key for ShelfHelp AI access"
      }
    },
    "schemas": {
      "Book": {
        "type": "object",
        "properties": {
          "id": {"type": "string", "description": "Unique book identifier"},
          "title": {"type": "string", "description": "Book title"},
          "author": {"type": "string", "description": "Book author"},
          "genre": {"type": "string", "description": "Primary genre"},
          "subgenre": {"type": "string", "description": "Specific subgenre"},
          "tropes": {"type": "array", "items": {"type": "string"}, "description": "Story tropes"},
          "status": {"type": "string", "enum": ["tbr", "reading", "read"], "description": "Reading status"},
          "rating": {"type": "number", "minimum": 0, "maximum": 5, "description": "User rating"},
          "dateAdded": {"type": "string", "format": "date-time", "description": "Date added to library"},
          "priority": {"type": "number", "description": "Queue priority score"}
        }
      },
      "Classification": {
        "type": "object",
        "properties": {
          "genres": {"type": "array", "items": {"type": "string"}, "description": "Available genres"},
          "subgenres": {"type": "object", "description": "Genre to subgenre mapping"},
          "tropes": {"type": "array", "items": {"type": "string"}, "description": "Available tropes"}
        }
      },
      "QueueInsights": {
        "type": "object",
        "properties": {
          "total_books": {"type": "number", "description": "Total books in queue"},
          "estimated_reading_time": {"type": "string", "description": "Estimated time to complete queue"},
          "top_genres": {"type": "array", "items": {"type": "string"}, "description": "Most common genres"},
          "recommendations": {"type": "array", "items": {"type": "string"}, "description": "Reading recommendations"}
        }
      }
    }
  },
  "security": [
    {"ApiKeyAuth": []}
  ],
  "paths": {
    "/api/books": {
      "get": {
        "operationId": "getAllBooks",
        "summary": "Get all books",
        "description": "Retrieve all books in the user's library with optional filtering by status (tbr/reading/read), genre, and pagination. Perfect for browsing the complete collection.",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Filter by reading status",
            "schema": {"type": "string", "enum": ["tbr", "reading", "read"]}
          },
          {
            "name": "genre",
            "in": "query", 
            "description": "Filter by genre",
            "schema": {"type": "string"}
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of results (max 50 for performance)",
            "schema": {"type": "integer", "minimum": 1, "maximum": 50, "default": 20}
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset for pagination",
            "schema": {"type": "integer", "minimum": 0, "default": 0}
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved books",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "books": {"type": "array", "items": {"$ref": "#/components/schemas/Book"}},
                    "total": {"type": "number", "description": "Total books available"},
                    "filtered": {"type": "number", "description": "Books matching filters"},
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "limit": {"type": "number"},
                        "offset": {"type": "number"},
                        "hasMore": {"type": "boolean"}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createBook",
        "summary": "Add new book",
        "description": "Add a new book to the library",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["title", "author"],
                "properties": {
                  "title": {"type": "string", "description": "Book title"},
                  "author": {"type": "string", "description": "Book author"},
                  "genre": {"type": "string", "description": "Primary genre"},
                  "subgenre": {"type": "string", "description": "Specific subgenre"},
                  "tropes": {"type": "array", "items": {"type": "string"}, "description": "Story tropes"},
                  "status": {"type": "string", "enum": ["tbr", "reading", "read"], "default": "tbr"}
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Book created successfully",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/Book"}
              }
            }
          }
        }
      }
    },
    "/api/books/search": {
      "get": {
        "operationId": "searchBooks",
        "summary": "Search books by title/author",
        "description": "Search for books using title and/or author keywords. Use this when the user mentions a specific book or author name to find it in their library.",
        "parameters": [
          {
            "name": "title",
            "in": "query",
            "description": "Book title to search for (partial matches allowed)",
            "schema": {"type": "string"}
          },
          {
            "name": "author",
            "in": "query", 
            "description": "Author name to search for (partial matches allowed)",
            "schema": {"type": "string"}
          }
        ],
        "responses": {
          "200": {
            "description": "Books found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "books": {"type": "array", "items": {"$ref": "#/components/schemas/Book"}},
                    "searchTerms": {"type": "object"},
                    "resultsCount": {"type": "number"},
                    "totalBooks": {"type": "number"}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/books/{id}": {
      "get": {
        "operationId": "getBookById",
        "summary": "Get specific book",
        "description": "Retrieve a specific book by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Book ID",
            "schema": {"type": "string"}
          }
        ],
        "responses": {
          "200": {
            "description": "Book found",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/Book"}
              }
            }
          },
          "404": {
            "description": "Book not found"
          }
        }
      },
      "patch": {
        "operationId": "updateBook",
        "summary": "Update book",
        "description": "Update an existing book's information",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Book ID",
            "schema": {"type": "string"}
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {"type": "string"},
                  "author": {"type": "string"},
                  "genre": {"type": "string"},
                  "subgenre": {"type": "string"},
                  "tropes": {"type": "array", "items": {"type": "string"}},
                  "status": {"type": "string", "enum": ["tbr", "reading", "read"]},
                  "rating": {"type": "number", "minimum": 0, "maximum": 5}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Book updated successfully",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/Book"}
              }
            }
          }
        }
      }
    },
    "/api/books/unclassified": {
      "get": {
        "operationId": "getUnclassifiedBooks",
        "summary": "Get unclassified books",
        "description": "Retrieve books that need genre/trope classification",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of results",
            "schema": {"type": "integer", "minimum": 1, "maximum": 20, "default": 10}
          }
        ],
        "responses": {
          "200": {
            "description": "Unclassified books retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "books": {"type": "array", "items": {"$ref": "#/components/schemas/Book"}},
                    "total_unclassified": {"type": "number"},
                    "classification_progress": {"type": "number", "description": "Percentage classified"}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/classify": {
      "get": {
        "operationId": "getClassifications",
        "summary": "Get available classifications",
        "description": "Retrieve all available genres, subgenres, and tropes for book classification",
        "responses": {
          "200": {
            "description": "Classifications retrieved successfully",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/Classification"}
              }
            }
          }
        }
      },
      "post": {
        "operationId": "unifiedClassifyBook",
        "summary": "Classify and add book with web research",
        "description": "Automatically classify a book's genre, subgenre, and tropes using web research and AI analysis. Use this when adding new books or when the user mentions a book they want to add to their library.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {"type": "string", "description": "Book title (required if no book_id)"},
                  "author": {"type": "string", "description": "Book author (optional, helps with disambiguation)"},
                  "book_id": {"type": "string", "description": "Existing book ID to classify (alternative to title/author)"},
                  "description": {"type": "string", "description": "Book description (optional, improves classification)"},
                  "force_web_search": {"type": "boolean", "default": true, "description": "Perform web research for enhanced metadata"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Book classified successfully with comprehensive metadata",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {"type": "string"},
                    "book": {"$ref": "#/components/schemas/Book"},
                    "classification": {
                      "type": "object",
                      "properties": {
                        "genre": {"type": "string"},
                        "subgenre": {"type": "string"},
                        "tropes": {"type": "array", "items": {"type": "string"}},
                        "spice_level": {"type": "number"},
                        "confidence": {"type": "number"},
                        "source": {"type": "string"}
                      }
                    },
                    "web_research": {"type": "object", "description": "Goodreads and other web sources data"},
                    "spice_research": {"type": "object", "description": "Romance.io spice level data"},
                    "book_updated": {"type": "boolean", "description": "Whether book was automatically updated"},
                    "auto_applied": {"type": "boolean", "description": "Whether classification was automatically applied"}
                  }
                }
              }
            }
          },
          "300": {
            "description": "Multiple books found - disambiguation needed"
          },
          "404": {
            "description": "Book not found"
          }
        }
      }
    },
    "/api/classify/match": {
      "post": {
        "operationId": "matchClassification",
        "summary": "Match specific classification field",
        "description": "Match a specific text against genre, subgenre, or trope classifications",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["text", "field"],
                "properties": {
                  "text": {"type": "string", "description": "Text to match"},
                  "field": {"type": "string", "enum": ["genre", "subgenre", "trope"], "description": "Classification field"},
                  "limit": {"type": "integer", "minimum": 1, "maximum": 10, "default": 5}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Matches found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "matches": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "value": {"type": "string"},
                          "score": {"type": "number"},
                          "type": {"type": "string"}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/queue": {
      "get": {
        "operationId": "getBasicQueue",
        "summary": "Get basic TBR queue",
        "description": "Retrieve basic to-be-read queue",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of books",
            "schema": {"type": "integer", "minimum": 1, "maximum": 50, "default": 10}
          }
        ],
        "responses": {
          "200": {
            "description": "Queue retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "queue": {"type": "array", "items": {"$ref": "#/components/schemas/Book"}},
                    "total": {"type": "number"}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/queue/tbr": {
      "get": {
        "operationId": "getIntelligentTbrQueue",
        "summary": "Get intelligent TBR queue",
        "description": "Get the user's to-be-read queue with intelligent prioritization based on their reading preferences and patterns. Best for 'what should I read next?' questions.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of books",
            "schema": {"type": "integer", "minimum": 1, "maximum": 20, "default": 10}
          },
          {
            "name": "mode",
            "in": "query",
            "description": "Queue prioritization mode",
            "schema": {"type": "string", "enum": ["balanced", "diversity", "preferences"], "default": "balanced"}
          }
        ],
        "responses": {
          "200": {
            "description": "Intelligent TBR queue retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "queue": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {"$ref": "#/components/schemas/Book"},
                          {
                            "type": "object",
                            "properties": {
                              "preference_score": {"type": "number"},
                              "priority_reason": {"type": "string"}
                            }
                          }
                        ]
                      }
                    },
                    "total": {"type": "number"},
                    "algorithm": {"type": "string"}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/queue/smart": {
      "get": {
        "operationId": "getSmartQueue",
        "summary": "Get smart prioritized queue",
        "description": "Retrieve queue with advanced AI-driven prioritization",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of books",
            "schema": {"type": "integer", "minimum": 1, "maximum": 15, "default": 8}
          }
        ],
        "responses": {
          "200": {
            "description": "Smart queue retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "queue": {"type": "array", "items": {"$ref": "#/components/schemas/Book"}},
                    "reasoning": {"type": "array", "items": {"type": "string"}},
                    "optimization": {"type": "string"}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/queue/insights": {
      "get": {
        "operationId": "getQueueInsights",
        "summary": "Get comprehensive queue analytics",
        "description": "Retrieve detailed analytics and insights about the reading queue",
        "responses": {
          "200": {
            "description": "Queue insights retrieved",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/QueueInsights"}
              }
            }
          }
        }
      }
    },
    "/api/queue/reorder": {
      "post": {
        "operationId": "reorderQueue",
        "summary": "Reorder book position",
        "description": "Change the position of a book in the reading queue",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["book_id", "new_position"],
                "properties": {
                  "book_id": {"type": "string", "description": "Book ID to reorder"},
                  "new_position": {"type": "integer", "minimum": 1, "description": "New position in queue"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Book reordered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {"type": "boolean"},
                    "book": {"$ref": "#/components/schemas/Book"},
                    "new_queue": {"type": "array", "items": {"$ref": "#/components/schemas/Book"}}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/queue/promote": {
      "post": {
        "operationId": "promoteBook",
        "summary": "Promote book to top priority",
        "description": "Move a book to the top of the reading queue",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["book_id"],
                "properties": {
                  "book_id": {"type": "string", "description": "Book ID to promote"},
                  "reason": {"type": "string", "description": "Reason for promotion"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Book promoted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {"type": "boolean"},
                    "book": {"$ref": "#/components/schemas/Book"},
                    "message": {"type": "string"}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/recommendations/discover": {
      "get": {
        "operationId": "discoverBooks",
        "summary": "Discover new books with external recommendations",
        "description": "Get personalized book recommendations from external sources based on user preferences",
        "parameters": [
          {
            "name": "mood",
            "in": "query",
            "description": "Current reading mood (light, intense, escapist, etc.)",
            "schema": {"type": "string"}
          },
          {
            "name": "genre",
            "in": "query",
            "description": "Preferred genre for recommendations",
            "schema": {"type": "string"}
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of recommendations to return",
            "schema": {"type": "integer", "minimum": 1, "maximum": 10, "default": 5}
          }
        ],
        "responses": {
          "200": {
            "description": "Book recommendations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "recommendations": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {"type": "string"},
                          "author": {"type": "string"},
                          "description": {"type": "string"},
                          "match_reason": {"type": "string"},
                          "source": {"type": "string"},
                          "confidence": {"type": "number"}
                        }
                      }
                    },
                    "search_strategy": {"type": "string"},
                    "total_sources": {"type": "number"}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/preferences/insights": {
      "get": {
        "operationId": "getReadingInsights",
        "summary": "Get reading insights and analytics",
        "description": "Retrieve detailed analytics about reading preferences and patterns",
        "responses": {
          "200": {
            "description": "Reading insights retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "personality_profile": {
                      "type": "object",
                      "properties": {
                        "primary_type": {"type": "string"},
                        "secondary_type": {"type": "string"},
                        "traits": {"type": "array", "items": {"type": "string"}}
                      }
                    },
                    "reading_patterns": {
                      "type": "object",
                      "properties": {
                        "favorite_genres": {"type": "array", "items": {"type": "string"}},
                        "seasonal_preferences": {"type": "object"},
                        "reading_velocity": {"type": "string"}
                      }
                    },
                    "recommendations_summary": {
                      "type": "object",
                      "properties": {
                        "next_read_suggestion": {"type": "string"},
                        "mood_based_options": {"type": "array", "items": {"type": "string"}},
                        "genre_exploration": {"type": "array", "items": {"type": "string"}}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/rss/ingest": {
      "post": {
        "operationId": "ingestRssFeed",
        "summary": "Ingest RSS feed from Goodreads",
        "description": "Process RSS feed from Goodreads to update book statuses and trigger preference learning when books are marked as 'read'. This is the core workflow for RSS-driven preference learning.",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "force_update": {"type": "boolean", "default": false, "description": "Force update existing books"},
                  "trigger_learning": {"type": "boolean", "default": true, "description": "Trigger preference learning for newly read books"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "RSS feed processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {"type": "boolean"},
                    "newBooks": {"type": "number", "description": "Number of new books added"},
                    "updatedBooks": {"type": "number", "description": "Number of books updated"},
                    "newlyReadBooks": {"type": "array", "items": {"$ref": "#/components/schemas/Book"}, "description": "Books newly marked as read that trigger preference learning"},
                    "totalBooks": {"type": "number", "description": "Total books in database"},
                    "learningPrompts": {"type": "array", "items": {"type": "string"}, "description": "AI prompts for preference learning conversations"}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/preferences/learn": {
      "post": {
        "operationId": "learnFromBookExperience",
        "summary": "Learn preferences from book reading experience",
        "description": "Record user preferences based on their experience with a specific book. Used in RSS-triggered preference learning conversations.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["book_id", "experience"],
                "properties": {
                  "book_id": {"type": "string", "description": "Book ID that was read"},
                  "experience": {
                    "type": "object",
                    "properties": {
                      "rating": {"type": "number", "minimum": 1, "maximum": 5, "description": "User rating"},
                      "liked_aspects": {"type": "array", "items": {"type": "string"}, "description": "What the user liked"},
                      "disliked_aspects": {"type": "array", "items": {"type": "string"}, "description": "What the user disliked"},
                      "mood_when_read": {"type": "string", "description": "User's mood when reading"},
                      "reading_context": {"type": "string", "description": "When/where/how they read it"},
                      "would_recommend": {"type": "boolean", "description": "Would recommend to others"},
                      "similar_books_wanted": {"type": "boolean", "description": "Wants similar recommendations"},
                      "notes": {"type": "string", "description": "Additional notes"}
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Preference learning recorded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {"type": "boolean"},
                    "book": {"$ref": "#/components/schemas/Book"},
                    "preferences_updated": {"type": "boolean"},
                    "learning_insights": {"type": "object", "description": "Insights from preference learning"},
                    "next_recommendations": {"type": "array", "items": {"type": "string"}, "description": "Updated recommendations based on learning"}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/preferences/prompts": {
      "get": {
        "operationId": "getPreferenceLearningPrompts",
        "summary": "Get AI prompts for preference learning",
        "description": "Retrieve conversation prompts for AI assistants to learn user preferences from recently read books",
        "parameters": [
          {
            "name": "book_id",
            "in": "query",
            "description": "Specific book ID to generate prompts for",
            "schema": {"type": "string"}
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of prompts",
            "schema": {"type": "integer", "minimum": 1, "maximum": 10, "default": 5}
          }
        ],
        "responses": {
          "200": {
            "description": "Preference learning prompts retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "prompts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "book_id": {"type": "string"},
                          "book_title": {"type": "string"},
                          "book_author": {"type": "string"},
                          "conversation_starter": {"type": "string", "description": "Natural conversation starter about the book"},
                          "follow_up_questions": {"type": "array", "items": {"type": "string"}, "description": "Questions to understand preferences"},
                          "learning_objectives": {"type": "array", "items": {"type": "string"}, "description": "What to learn from this conversation"}
                        }
                      }
                    },
                    "total_unprocessed": {"type": "number", "description": "Total books awaiting preference learning"},
                    "learning_strategy": {"type": "string", "description": "Recommended approach for learning conversations"}
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}